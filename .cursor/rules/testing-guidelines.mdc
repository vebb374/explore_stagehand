---
description:
globs:
alwaysApply: false
---
# Testing Guidelines

## Test Structure

Tests should follow a clear structure as shown in [tests/recruiter/assessment/invite_candidates.spec.ts](mdc:tests/recruiter/assessment/invite_candidates.spec.ts):

1. **Arrange** - Set up test data and prerequisites
2. **Act** - Perform the actions being tested
3. **Assert** - Verify the expected outcomes

## Test Types

- **Positive tests** - Verify that features work correctly with valid inputs
- **Negative tests** - Verify proper handling of invalid inputs or edge cases

## Best Practices

- Group related tests with `test.describe()`
- Use `test.beforeEach()` for common setup steps
- Keep tests independent and isolated
- Use meaningful test names that describe what is being tested
- Avoid test dependencies (one test should not depend on another)

## Example: Invite Candidates Tests

```typescript
// Positive test - verifies expected behavior
test("Positive - Can invite a single candidate with valid email", async ({ page }) => {
  // Setup (Arrange)
  const assessmentDashboard = new AssessmentDashboardPage(page);
  await assessmentDashboard.clickFirstTest();
  
  // Action (Act)
  const overviewPage = new AssessmentOverviewPage(page);
  const inviteModal = await overviewPage.clickInviteCandidates();
  await inviteModal.addCandidate(candidate.email, candidate.firstName, candidate.lastName);
  await inviteModal.sendInvitations();
  
  // Verification (Assert)
  await overviewPage.navigateToInvitedTab();
  const invitedPage = new InvitedCandidatesPage(page);
  expect(await invitedPage.candidateExists(candidate.email)).toBe(true);
});

// Negative test - verifies error handling
test("Negative - Cannot add candidate with invalid email format", async ({ page }) => {
  // Setup and action
  const overviewPage = new AssessmentOverviewPage(page);
  const inviteModal = await overviewPage.clickInviteCandidates();
  
  // Fill invalid data
  await page.getByRole("textbox").filter({ has: page.locator('div:has-text("Email*")') }).fill("invalid-email");
  
  // Verify proper error handling
  const addButton = page.getByRole("button", { name: "Add candidate" });
  await expect(addButton).toBeDisabled();
});
