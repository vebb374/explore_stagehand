---
description: 
globs: pages/**
alwaysApply: false
---
# Playwright Step Annotations Best Practices

This rule provides guidance on using the `@step()` decorator in Playwright tests to improve test visualization and debugging.

## When to Use Step Annotations

1. **Use `@step()` only for complex functions** that contain multiple Playwright actions
   - Functions with 3+ Playwright interactions are good candidates
   - Simple one-line functions generally don't need step annotations

2. **Add step annotations when the function:**
   - Contains a logical sequence of related actions
   - Performs a complete user flow
   - Is frequently used across tests
   - Would benefit from visual grouping in the UI mode

3. **Avoid over-using step annotations** which can make the trace view cluttered

## Step Description Guidelines

1. **Default behavior:** When used without parameters, `@step()` will use the function name
   ```typescript
   @step()
   async loginAsRecruiter(email: string, password: string) {
       // Multiple actions...
   }
   ```

2. **Add descriptions for clarity** when the function name might be confusing:
   ```typescript
   @step('Navigate to assessment overview page and wait for it to load')
   async navigateToAssessment(assessmentId: string) {
       // Implementation...
   }
   ```

3. **Use appropriate descriptions that:**
   - Are concise but descriptive (5-10 words)
   - Describe the high-level action being performed
   - Use active voice (e.g., "Navigate to..." instead of "Navigating to...")

## Example Usage

**Good examples:**
```typescript
// Complex function with multiple steps - needs @step()
@step()
async addCandidate(email: string, firstName?: string, lastName?: string) {
    await this.emailInput.fill(email);
    if (firstName) await this.firstNameInput.fill(firstName);
    if (lastName) await this.lastNameInput.fill(lastName);
    await this.addCandidateButton.click();
    await this.page.waitForSelector('.candidate-row');
}

// Function with potentially confusing name - use description
@step('Search for a candidate and wait for results')
async findCandidate(searchTerm: string) {
    await this.searchInput.fill(searchTerm);
    await this.searchButton.click();
    await this.page.waitForSelector('.search-results');
}
```

**Not needed:**
```typescript
// Simple one-line functions don't need @step()
async closeModal() {
    await this.closeButton.click();
}

// Getter methods don't need @step()
async getSelectedDate(): Promise<string> {
    return await this.dateInput.inputValue();
}
```

## Benefits of Proper Step Annotations

1. **Improved visual organization** when using Playwright UI mode (`--ui` flag)
2. **Better debugging** as steps are grouped logically in traces
3. **Clearer test reports** with meaningful step names
4. **Easier maintenance** as complex flows are visually separated
