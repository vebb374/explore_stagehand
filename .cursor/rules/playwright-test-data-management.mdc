---
description: when using Page Object model in test files or using testdata in testcases
globs: 
alwaysApply: false
---
# Playwright Test Data Management

Each test should properly handle test data to ensure isolation and maintainability. This rule provides guidance on test data management in our TypeScript Playwright framework.

## Key Principles

1. **Test Isolation**: Each test should be completely independent
2. **Data Creation**: Tests should create or fetch their own test data
3. **Cleanup**: Tests should clean up any data they create
4. **No Shared State**: Don't rely on data created by other tests
5. **Import Data Utilities**: Import test data utilities directly in tests

## Fixture-Based Test Data Management

Only fundamental test data should be managed through fixtures to ensure a standard approach and proper isolation.

### Base Fixtures for Authentication Data

The `base-fixtures.ts` file provides foundational fixtures like candidate credentials:

```typescript
// utils/base-fixtures.ts
import { test as base } from "@playwright/test";
import { getCandidateCredentials } from "utils";

type CustomFixtures = {
  getUniqueCandidateCredentials: { email: string; password: string };
};

export const test = base.extend<CustomFixtures>({
    getUniqueCandidateCredentials: async ({}, use, testInfo) => {
        const credentials = getCandidateCredentials(testInfo.title);
        console.log(`Using candidate email: ${credentials.email} for test: ${testInfo.title}`);
    
        await use(credentials);
    }
});
```

## Utility-Based Test Data

Import utility functions directly in tests for most test data needs:

```typescript
// tests/recruiter/login/login.spec.ts
import { test, expect } from './fixtures';
import { getCompanyData } from "utils";

test.describe("Recruiter Login", () => {
  test("should login successfully", async ({ loginPage, topNavbar }) => {
    const { ADMIN, PASSWORD } = getCompanyData("qa_test_company_15");
    
    await loginPage.navigateTo();
    await loginPage.login(ADMIN, PASSWORD);
    
    await expect(topNavbar.assessmentsLink).toBeVisible();
  });
});
```

## Dynamic Data Generation

Import data generators directly from utils:

```typescript
// tests/recruiter/assessment/create.spec.ts
import { test, expect } from './fixtures';
import { 
  generateRandomEmail, 
  generateRandomAssessmentName 
} from "utils";

test("should create a new assessment", async ({ assessmentPage }) => {
  const uniqueEmail = generateRandomEmail();
  const assessmentName = generateRandomAssessmentName();
  
  await assessmentPage.navigateTo();
  await assessmentPage.fillAssessmentDetails({
    name: assessmentName,
    adminEmail: uniqueEmail
  });
  
  await expect(assessmentPage.successMessage).toBeVisible();
});
```

## Test Data Storage

Keep test data organized in appropriate directories:

```
test-data/
  ├── candidates/           # Candidate test data
  │   └── infy_pref_test_users_40K/  # Bulk test user data
  └── companies/            # Company/recruiter test data
```

## API-Driven Test Data Setup

Use API clients to create, modify, and clean up test data efficiently:

```typescript
// tests/recruiter/assessment/create.spec.ts
import { test, expect } from './fixtures';
import { getCompanyData } from "utils";

test.describe("Assessment Creation", () => {
  let assessmentId: string;
  
  test.beforeEach(async ({ IsolatedAPIClient }) => {
    // Login via API
    const { ADMIN, PASSWORD } = getCompanyData("qa_test_company_15");
    await IsolatedAPIClient.auth.login(ADMIN, PASSWORD);
    
    // Create test data via API
    const createResponse = await IsolatedAPIClient.request.post("/api/create-assessment", {
      data: {
        name: "Test Assessment",
        type: "coding"
      }
    });
    
    const data = await createResponse.json();
    assessmentId = data.id;
  });
  
  test.afterEach(async ({ IsolatedAPIClient }) => {
    // Clean up test data after test
    if (assessmentId) {
      await IsolatedAPIClient.request.delete(`/api/assessments/${assessmentId}`);
    }
  });
  
  test("should edit created assessment", async ({ assessmentOverviewPage }) => {
    // Use the created assessment in the test
    await assessmentOverviewPage.navigateTo(assessmentId);
    // Continue with test...
  });
});
```

## API vs UI for Test Data

- **Use API for**:
  - Creating prerequisite data efficiently
  - Setting up complex test scenarios
  - Cleaning up after tests
  - Verifying data changes in the backend

- **Use UI for**:
  - Testing the actual user workflows
  - Validating user-facing functionality
  - End-to-end user journeys

