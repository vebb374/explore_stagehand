---
description: 
globs: 
alwaysApply: true
---
# Playwright Project Architecture and Structure

This rule provides comprehensive information about our project's architecture, structure, and organization for Playwright tests.

## Project Structure

Our Playwright testing project follows this high-level structure:

```
AuQA/
  ├── pages/               # Page objects and components
  │   ├── candidate/       # Candidate-specific pages
  │   ├── common-components/ # Shared components across user types
  │   │   └── login/       # Login-related components
  │   └── recruiter/       # Recruiter-specific pages
  │       ├── assessment/  # Assessment-related pages
  │       └── interview/   # Interview-related pages
  ├── tests/               # Test files
  │   ├── candidate/       # Candidate-specific tests
  │   │   └── fixtures.ts  # Candidate fixtures
  │   └── recruiter/       # Recruiter-specific tests
  │       ├── assessment/  # Assessment-related tests
  │       │   └── fixtures.ts  # Assessment fixtures
  │       ├── interview/   # Interview-related tests
  │       │   └── fixtures.ts  # Interview fixtures
  │       └── login/       # Login-related tests
  │           └── fixtures.ts  # Login fixtures
  ├── test-data/           # Test data files
  │   ├── candidates/      # Candidate test data
  │   └── companies/       # Company test data
  ├── utils/               # Utility functions
  │   └── base-fixtures.ts # Base fixtures for extension
  ├── .env                 # Environment variables
  ├── playwright.config.ts # Playwright configuration
  └── tsconfig.json        # TypeScript configuration
```

## Component Organization

1. Pages should be broken down into logical components to improve maintainability and reusability
2. Each page or component should be in its own file in the appropriate directory
3. Components should follow the POM (Page Object Model) pattern
4. Related components should be grouped in subdirectories

## Component Relationships

Use composition to build complex page structures:

```
AssessmentOverviewPage
  ├── QuestionsComponent
  ├── SettingsComponent
  └── CandidatesComponent
      └── InviteModal
          
```

Example of proper component composition:

```typescript
export class InviteCandidatesModal extends BasePage {
    readonly datePicker: DatePicker;
    
    constructor(page: Page) {
        super(page);
        this.datePicker = new DatePicker(page, this.inviteExpirationInput);
    }
    
    // Use sub-component directly in tests: 
    // await inviteModal.datePicker.selectDate(15, 6, 2023);
}
```

## Fixture Structure

Each test group has its own `fixtures.ts` file that extends the base fixtures:

```typescript
// tests/recruiter/assessment/fixtures.ts
import { test as base } from "utils/base-fixtures.js";
import { AssessmentOverviewPage } from "pages/recruiter/assessment/overview/AssessmentOverviewPage.js";

type CustomFixtures = {
  assessmentOverviewPage: AssessmentOverviewPage;
};

export const test = base.extend<CustomFixtures>({
  assessmentOverviewPage: async ({ page }, use) => {
    await use(new AssessmentOverviewPage(page));
  }
});

export { expect } from "@playwright/test";
```

## Example Directory Structure

```
pages/
  ├── common-components/       # Shared components used across pages
  │   ├── TopNavComponent.ts
  │   └── SidebarComponent.ts
  ├── recruiter/
  │   ├── assessment/
  │   │   ├── overview/
  │   │   │   ├── AssessmentOverviewPage.ts      # Main page file
  │   │   │   └── components/                    # Components specific to this page
  │   │   │       ├── SettingsComponent.ts
  │   │   │       ├── QuestionsOverviewComponent.ts
  │   │   │       └── OtherDetailsComponent.ts
  │   │   └── components/                      # Shared components within assessment context
  │   │       └── AssessmentNavigationComponent.ts
  │   └── interview/
  │       └── [...]
  └── candidate/
      └── [...]
tests/
  ├── recruiter/
  │   ├── assessment/
  │   │   ├── fixtures.ts                      # Fixtures for assessment tests
  │   │   └── overview.spec.ts                 # Tests for assessment overview page
  │   └── interview/
  │       ├── fixtures.ts                      # Fixtures for interview tests
  │       └── [...]
  └── candidate/
      ├── fixtures.ts                          # Fixtures for candidate tests
      └── [...]
```

## Component Implementation Example

```typescript
// pages/recruiter/assessment/overview/components/QuestionsOverviewComponent.ts
import { Locator, Page } from '@playwright/test';

export class QuestionsOverviewComponent {
  readonly page: Page;
  readonly container: Locator;
  readonly questionTypeHeader: Locator;
  readonly difficultyLevelHeader: Locator;
  readonly questionTypeRow: Locator;

  constructor(page: Page) {
    this.page = page;
    this.container = page.locator('section[aria-label="Questions Overview"]');
    this.questionTypeHeader = this.container.getByRole('columnheader', { name: 'Question type' });
    this.difficultyLevelHeader = this.container.getByRole('columnheader', { name: 'Difficulty level' });
    this.questionTypeRow = this.container.getByRole('row').filter({ hasText: 'SQL' });
  }

  async getQuestionCount(): Promise<string> {
    const questionsElement = this.container.getByText(/Questions/);
    return await questionsElement.textContent() || '';
  }
}
```

## Fixture Implementation Example

```typescript
// tests/recruiter/assessment/fixtures.ts
import { test as base } from "utils/base-fixtures.js";
import { AssessmentOverviewPage } from "pages/recruiter/assessment/overview/AssessmentOverviewPage.js";

// Define the type for our custom fixtures
type CustomFixtures = {
    assessmentOverviewPage: AssessmentOverviewPage;
};

/**
 * Extended test fixtures with assessment pages
 */
export const test = base.extend<CustomFixtures>({
    assessmentOverviewPage: async ({ page }, use) => {
        await use(new AssessmentOverviewPage(page));
    }
});

export { expect } from "@playwright/test";
```

## TypeScript Configuration

We use TypeScript for type safety. Our tsconfig.json includes path aliases to make imports cleaner:

```json
{
  "compilerOptions": {
    "target": "ES2022",
    "module": "NodeNext",
    "moduleResolution": "NodeNext",
    "outDir": "./dist",
    "rootDir": "./",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "allowImportingTsExtensions": false,
    "noEmit": false,
    "baseUrl": ".",
    "paths": {
      "pages/*": ["pages/*"],
      "tests/*": ["tests/*"],
      "utils/*": ["utils/*"],
      "utils": ["utils/index"]
    }
  }
}
```

## Import Paths

When importing files, use the path aliases defined in tsconfig.json:

```typescript
// GOOD - Using path aliases
import { LoginPage } from 'pages/common-components/login/login-page';
import { getCompanyData } from 'utils';

// BAD - Using relative paths
import { LoginPage } from '../../pages/common-components/login/login-page';
```

Available path aliases:
- `pages/*` - For page objects and components
- `tests/*` - For test files 
- `utils/*` - For utility functions 
- `utils` - Shorthand for utils/index

## Package Management with pnpm

We use pnpm as our package manager for faster installations and better disk space efficiency.

### Common pnpm Commands

```bash
# Install dependencies
pnpm install

# Add a new dependency
pnpm add -D @playwright/test

# Run tests
pnpm test

# Install Playwright browsers
pnpm exec playwright install

# Generate a new Playwright report
pnpm exec playwright show-report
```

### Script Naming Conventions

In package.json, our scripts follow these naming conventions:

```json
{
  "scripts": {
    "test": "playwright test",
    "test:ui": "playwright test --ui",
    "test:debug": "playwright test --debug",
    "test:smoke": "playwright test --grep @smoke"
  }
}
```

## Environment Variables

Environment-specific configuration is managed through .env files:

```
# .env
BASE_URL=https://example.com
API_BASE_URL=https://api.example.com
```

Access environment variables in tests:

```typescript
const baseUrl = process.env.BASE_URL || 'https://default-url.com';
```
