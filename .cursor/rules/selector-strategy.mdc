---
description: 
globs: 
alwaysApply: true
---
# Selector Strategy Priorities

This project follows a strict hierarchy for selector strategies to ensure test reliability.

## Priority Order (Most to Least Preferred)

1. **Role-based selectors** (most resilient)
   ```typescript
   page.getByRole('button', { name: 'Sign in' })
   ```

2. **Text-based selectors** 
   ```typescript
   page.getByText('Welcome back')
   ```

3. **Test ID-based selectors**
   ```typescript
   page.locator('[data-testid="login-form"]')
   ```

4. **CSS/XPath selectors** (least preferred)
   ```typescript
   page.locator('.login-button')
   page.locator('//button[contains(@class, "submit")]')
   ```

## Implementation Examples

See [pages/recruiter/assessment/components/invite-candidates-modal.component.ts](mdc:evaluate_stagehand/pages/recruiter/assessment/components/invite-candidates-modal.component.ts) for examples of well-structured selectors:

```typescript
// Role-based selector (preferred)
this.addCandidateButton = page.getByRole('button', {
  name: 'Add candidate',
});

// Text-based selector with filtering
this.modalTitle = this.modal.locator('header').filter({
  hasText: 'Invite candidates',
});

// CSS selector with data attribute (when needed)
this.emailInput = page.locator('div')
  .filter({ hasText: /^Email\*$/ })
  .getByRole('textbox');
```

## Avoiding Selector Issues

- Prefer role-based selectors for accessibility and resilience
- Use text content when roles aren't available or specific enough
- Combine selectors with filters for better targeting
- Use CSS/XPath only as a last resort
