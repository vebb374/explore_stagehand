---
description: when creating files in pages/ or tests/ in the codebase (it provides details about folder structure)
globs: 
alwaysApply: false
---
# Playwright Component Structure

This rule provides guidance on how to structure components and pages in the AuQA Playwright test framework.
Pages should be broken down into logical components to improve maintainability and reusability. 
Components are parts of a page that can be tested independently.

## Directory Structure

The project follows a clear separation between page objects and test files:

- `pages/` - Contains all page objects and UI components
  - `candidate/` - Candidate-specific pages
  - `common-components/` - Shared components used across different user types
  - `recruiter/` - Recruiter-specific pages
    - `assessment/` - Assessment-related pages and components
    - `interview/` - Interview-related pages and components
    - `common/` - Common recruiter components
- `tests/` - Contains all test files
  - `candidate/` - Tests for candidate flows
  - `recruiter/` - Tests for recruiter flows
    - `assessment/` - Tests for assessment functionality
    - `interview/` - Tests for interview functionality
    - `login/` - Tests for login flows

## Component Organization

1. Each page or component should be in its own file in the appropriate directory
2. Components should follow the POM (Page Object Model) pattern
3. Each page/component should inherit from BasePage
4. Related components should be grouped in subdirectories

## Component Relationships

1. Use composition to include sub-components (e.g., DatePicker inside InviteCandidatesModal)
2. Access sub-component methods directly via the component instance (e.g., `inviteModal.datePicker.selectDate()`)
3. Don't duplicate sub-component methods in the parent component

Example of proper component composition:

```typescript
export class InviteCandidatesModal extends BasePage {
    readonly datePicker: DatePicker;
    
    constructor(page: Page) {
        super(page);
        this.datePicker = new DatePicker(page, this.inviteExpirationInput);
    }
    
    // Use sub-component directly in tests: 
    // await inviteModal.datePicker.selectDate(15, 6, 2023);
}
```

## Structure Guidelines

1. Organize files by feature/page, then by component
2. Only page files should be imported directly in fixture files
3. Components should be imported by their parent page or component
4. Each test group folder should have a `fixtures.ts` file

## Example Directory Structure

```
pages/
  ├── common-components/       # Shared components used across pages
  │   ├── TopNavComponent.ts
  │   └── SidebarComponent.ts
  ├── recruiter/
  │   ├── assessment/
  │   │   ├── overview/
  │   │   │   ├── AssessmentOverviewPage.ts      # Main page file
  │   │   │   └── components/                    # Components specific to this page
  │   │   │       ├── SettingsComponent.ts
  │   │   │       ├── QuestionsOverviewComponent.ts
  │   │   │       └── OtherDetailsComponent.ts
  │   │   └── components/                      # Shared components within assessment context
  │   │       └── AssessmentNavigationComponent.ts
  │   └── interview/
  │       └── [...]
  └── candidate/
      └── [...]
tests/
  ├── recruiter/
  │   ├── assessment/
  │   │   ├── fixtures.ts                      # Fixtures for assessment tests
  │   │   └── overview.spec.ts                 # Tests for assessment overview page
  │   └── interview/
  │       ├── fixtures.ts                      # Fixtures for interview tests
  │       └── [...]
  └── candidate/
      ├── fixtures.ts                          # Fixtures for candidate tests
      └── [...]
```

## Component Implementation Example

```typescript
// pages/recruiter/assessment/overview/components/QuestionsOverviewComponent.ts
import { Locator, Page } from '@playwright/test';

export class QuestionsOverviewComponent {
  readonly page: Page;
  readonly container: Locator;
  readonly questionTypeHeader: Locator;
  readonly difficultyLevelHeader: Locator;
  readonly questionTypeRow: Locator;

  constructor(page: Page) {
    this.page = page;
    this.container = page.locator('section[aria-label="Questions Overview"]');
    this.questionTypeHeader = this.container.getByRole('columnheader', { name: 'Question type' });
    this.difficultyLevelHeader = this.container.getByRole('columnheader', { name: 'Difficulty level' });
    this.questionTypeRow = this.container.getByRole('row').filter({ hasText: 'SQL' });
  }

  async getQuestionCount(): Promise<string> {
    const questionsElement = this.container.getByText(/Questions/);
    return await questionsElement.textContent() || '';
  }
}
```

## Fixture Implementation Example

```typescript
// tests/recruiter/assessment/fixtures.ts
import { test as base } from "utils/base-fixtures.js";
import { AssessmentOverviewPage } from "pages/recruiter/assessment/overview/AssessmentOverviewPage.js";

// Define the type for our custom fixtures
type CustomFixtures = {
    assessmentOverviewPage: AssessmentOverviewPage;
};

/**
 * Extended test fixtures with assessment pages
 */
export const test = base.extend<CustomFixtures>({
    assessmentOverviewPage: async ({ page }, use) => {
        await use(new AssessmentOverviewPage(page));
    }
});

export { expect } from "@playwright/test";
```
