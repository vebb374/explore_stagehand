---
description: when creating POM files or when creting files in pages/
globs: 
alwaysApply: false
---
# Component Composition Best Practices

This rule provides guidance on how to effectively compose components in the AuQA Playwright test framework.

## Principles of Composition

1. **Direct Access over Duplication**: When a parent component contains a child component, access the child's methods directly rather than duplicating functionality.

2. **Delegation Pattern**: Only create wrapper methods in the parent when they add additional functionality or improve test readability.

3. **Single Responsibility**: Each component should focus on its own responsibilities and delegate specialized functionality to appropriate sub-components.

## DatePicker Example

The `DatePicker` component is a perfect example of a specialized component that should be accessed directly:

```typescript
// In the test:
// GOOD ✅
await inviteModal.datePicker.selectDate(15, 6, 2025);
await inviteModal.datePicker.clearDate();

// BAD ❌ - Unnecessary wrapper methods
await inviteModal.setExpirationDate(15, 6, 2025);
await inviteModal.clearExpirationDate();
```

## When to Create Wrapper Methods

Create wrapper methods only when:

1. They add substantial functionality beyond the child component's methods
2. They combine multiple operations into a meaningful workflow
3. They provide better semantic meaning in the specific context
4. They make tests significantly more readable

Example of a justified wrapper method:

```typescript
// GOOD ✅ - Combines multiple operations with context-specific logic
async setExpirationDateNextMonth() {
    const today = new Date();
    const nextMonth = new Date(today);
    nextMonth.setMonth(today.getMonth() + 1);
    
    await this.datePicker.selectDate(
        nextMonth.getDate(),
        nextMonth.getMonth() + 1,
        nextMonth.getFullYear()
    );
    
    // Additional context-specific validation
    await this.validateExpirationDate();
}
```

## Implementation Guidelines

1. Initialize child components in the constructor:
```typescript
constructor(page: Page) {
    super(page);
    this.datePicker = new DatePicker(page, this.inviteExpirationInput);
}
```

2. Make child components accessible via public properties:
```typescript
readonly datePicker: DatePicker;
```

3. Document the composition relationship in code comments:
```typescript
/**
 * Modal for inviting candidates
 * Uses DatePicker component for date selection functionality
 */
```
