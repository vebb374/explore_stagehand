---
description: 
globs: 
alwaysApply: true
---
# Playwright Selector Strategies and Naming Conventions

This rule provides comprehensive guidance on creating robust selectors and following consistent naming conventions in our Playwright testing framework.

## Selector Priority

When creating selectors, use the following priority order:

1. **Accessibility attributes** (preferred)
   - Role: `page.getByRole('button', { name: 'Invite candidates' })`
   - Label: `page.getByLabel('Email')`
   - Text: `page.getByText('You can only add 3 more candidates')`

2. **Test attributes** (when accessibility attributes are not available)
   - Data attributes: `page.locator('[data-testid="invite-button"]')`
   - ARIA attributes: `page.locator('[aria-label="Close modal"]')`

3. **CSS selectors** (use when options 1 and 2 aren't available)
   - Class: `page.locator('.react-datepicker__day')`
   - Combination: `page.locator('.modal-header .close-button')`

4. **XPath** (last resort, use only when necessary)
   - `page.locator('//div[contains(@class,"test-title")]')`

## Selector Best Practices

1. **Be specific but flexible**
   - Too specific: `page.locator('.form-row:nth-child(2) input')` (breaks if structure changes)
   - Better: `page.getByRole('textbox', { name: 'Email' })`

2. **Filter when needed**
   - Use `filter()` to narrow down selection: 
     ```typescript
     page.locator('button').filter({ hasText: 'Invite' })
     ```

3. **Combine selectors for robustness**
   - Use `and()` or multiple filters:
     ```typescript
     page.getByRole('button').and(page.getByText('Submit'))
     ```

4. **Use context when needed**
   - Scope selectors to parent elements:
     ```typescript
     const modal = page.locator('.modal');
     const submitButton = modal.getByRole('button', { name: 'Submit' });
     ```

5. **Avoid selectors based on position**
   - Avoid: `page.locator('tr').nth(2)` (breaks if order changes)
   - Better: `page.locator('tr').filter({ hasText: 'expectedText' })`

## Examples from the Codebase

```typescript
// Good: Using role selectors
this.emailInput = page.getByRole('textbox', { name: 'olivia@gmail.com' });
this.addCandidateButton = page.getByRole('button', { name: 'Add candidate' });

// Good: Filtering by text
this.candidatesTable = page.locator('table').filter({ hasText: /Email/ });

// Good: Combining multiple attributes
this.inviteCandidatesButton = page.getByRole('button', {
    name: 'Invite candidates',
    exact: true,
});

// When needed: XPath for complex structures
this.closeModalButton = page.locator(
    '//div[contains(@class,"ql-flyout-main")]/button[@class="close-btn"]'
);
```

## Locating Elements Within Components

When working with components, define all locators relative to the component's container to ensure proper scoping:

```typescript
export class QuestionTableComponent {
  readonly container: Locator;
  readonly questionTypeHeader: Locator;
  readonly difficultyLevelCell: Locator;
  
  constructor(page: Page) {
    this.container = page.locator('[data-testid="question-table"]');
    this.questionTypeHeader = this.container.getByRole('columnheader', { name: 'Question type' });
    this.difficultyLevelCell = this.container.getByRole('cell', { name: 'Easy' });
  }
}
```

## When to Use Test IDs

Only use test IDs as a last resort, when elements cannot be selected using more semantic methods:

```typescript
// Only when necessary - Using data-testid
export class SpecialComponent {
  readonly container: Locator;
  
  constructor(page: Page) {
    this.container = page.getByTestId('special-container');
  }
}
```

## File Naming Conventions

1. Use kebab-case for file names: `assessment-overview-page.ts`, `invite-candidates-modal.ts`
2. Use descriptive names that indicate the file's purpose
3. Page object files should end with `-page.ts` or specify their component type (e.g., `-modal.ts`, `-component.ts`)
4. Test files should end with `.spec.ts`

## Class Naming Conventions

1. Use PascalCase for class names: `AssessmentOverviewPage`, `InviteCandidatesModal`
2. Page objects should be named after the page they represent
3. Component classes should include their component type in the name: `DatePicker`, `TopNavbarComponent`

## Method Naming Conventions

1. Use camelCase for method names: `addCandidate()`, `selectDate()`
2. Use verb phrases that describe the action: `click...`, `select...`, `fill...`, `get...`, `waitFor...`
3. Step methods that represent user flows should have descriptive names: `loginAsRecruiter()`, `addCandidateWithDetails()`
4. Boolean methods should use `is`, `has`, or `can` prefixes: `isEmailErrorVisible()`, `hasInvitationExpired()`

## Locator Naming Conventions

1. Use camelCase for locator properties: `emailInput`, `addCandidateButton`
2. Name locators after the UI element they represent
3. Use suffix to indicate the element type: `...Input`, `...Button`, `...Link`, `...Dropdown`, `...Table`
4. Use plurals for collections of elements: `removeButtons`, `daysCells`

## Test Naming Conventions

1. Use descriptive test names that clearly indicate what is being tested
2. Start with "should": `should validate invite modal functionality and mandatory fields`
3. Group related tests using `test.describe()`
4. Use tags to categorize tests: `@smoke`, `@functional`

Example:

```typescript
// File: invite-candidates-modal.ts
export class InviteCandidatesModal extends BasePage {
    readonly emailInput: Locator;
    readonly addCandidateButton: Locator;
    readonly datePicker: DatePicker;
    
    async addCandidate(email: string, firstName?: string, lastName?: string) {
        // Implementation
    }
    
    async isEmailErrorVisible(): Promise<boolean> {
        // Implementation
    }
}

// File: invite-candidates.spec.ts
test("should validate invite modal functionality and mandatory fields", async ({ 
    assessmentOverviewPage 
}) => {
    // Test implementation
});
```

## Variable & Function Naming

1. **Variables**: Use camelCase
   ```typescript
   const userEmail = 'test@example.com';
   ```

2. **Boolean Variables**: Start with "is", "has", "are", or "have"
   ```typescript
   const isLoggedIn = true;
   const hasPermission = false;
   ```

3. **Locators**: Use descriptive names that identify the element's purpose
   ```typescript
   readonly submitButton: Locator;
   readonly emailInput: Locator;
   readonly errorMessage: Locator;
   ```

4. **Function Names**: Start with a verb that describes the action
   ```typescript
   async navigateToOverview(): Promise<void> { ... }
   async fillLoginForm(email: string, password: string): Promise<void> { ... }
   async getQuestionCount(): Promise<number> { ... }
   ```

5. **Classes**: Use PascalCase
   ```typescript
   export class AssessmentOverviewPage { ... }
   export class QuestionTableComponent { ... }
   ```

6. **Fixture Names**: Use camelCase and descriptive names
   ```typescript
   // In fixtures.ts
   loginPage: LoginPage;
   assessmentOverviewPage: AssessmentOverviewPage;
   getUniqueCandidateCredentials: { email: string; password: string };
   ```

## Import Conventions

1. **Named exports**: Use the exact name
   ```typescript
   import { LoginPage } from 'pages/common-components/login/LoginPage';
   ```

2. **Default exports**: Use the same name as the exported class/function
   ```typescript
   import AssessmentPage from 'pages/recruiter/assessment/AssessmentPage';
   ```

3. **Path aliases**: Use the defined aliases in tsconfig.json
   ```typescript
   import { LoginPage } from 'pages/common-components/login/LoginPage';  // using alias
   ```
