---
description: when creating .ts files
globs: 
alwaysApply: false
---
# Playwright Naming Conventions

This rule provides guidance on naming conventions for Playwright test files, page objects, methods, and locators.

## File Naming

1. Use kebab-case for file names: `assessment-overview-page.ts`, `invite-candidates-modal.ts`
2. Use descriptive names that indicate the file's purpose
3. Page object files should end with `-page.ts` or specify their component type (e.g., `-modal.ts`, `-component.ts`)
4. Test files should end with `.spec.ts`

## Class Naming

1. Use PascalCase for class names: `AssessmentOverviewPage`, `InviteCandidatesModal`
2. Page objects should be named after the page they represent
3. Component classes should include their component type in the name: `DatePicker`, `TopNavbarComponent`

## Method Naming

1. Use camelCase for method names: `addCandidate()`, `selectDate()`
2. Use verb phrases that describe the action: `click...`, `select...`, `fill...`, `get...`, `waitFor...`
3. Step methods that represent user flows should have descriptive names: `loginAsRecruiter()`, `addCandidateWithDetails()`
4. Boolean methods should use `is`, `has`, or `can` prefixes: `isEmailErrorVisible()`, `hasInvitationExpired()`

## Locator Naming

1. Use camelCase for locator properties: `emailInput`, `addCandidateButton`
2. Name locators after the UI element they represent
3. Use suffix to indicate the element type: `...Input`, `...Button`, `...Link`, `...Dropdown`, `...Table`
4. Use plurals for collections of elements: `removeButtons`, `daysCells`

## Test Naming

1. Use descriptive test names that clearly indicate what is being tested
2. Start with "should": `should validate invite modal functionality and mandatory fields`
3. Group related tests using `test.describe()`
4. Use tags to categorize tests: `@smoke`, `@functional`

Example:

```typescript
// File: invite-candidates-modal.ts
export class InviteCandidatesModal extends BasePage {
    readonly emailInput: Locator;
    readonly addCandidateButton: Locator;
    readonly datePicker: DatePicker;
    
    async addCandidate(email: string, firstName?: string, lastName?: string) {
        // Implementation
    }
    
    async isEmailErrorVisible(): Promise<boolean> {
        // Implementation
    }
}

// File: invite-candidates.spec.ts
test("should validate invite modal functionality and mandatory fields", async ({ 
    assessmentOverviewPage 
}) => {
    // Test implementation
});
```

## Variable & Function Naming

1. **Variables**: Use camelCase
   ```typescript
   const userEmail = 'test@example.com';
   ```

2. **Boolean Variables**: Start with "is", "has", "are", or "have"
   ```typescript
   const isLoggedIn = true;
   const hasPermission = false;
   ```

3. **Locators**: Use descriptive names that identify the element's purpose
   ```typescript
   readonly submitButton: Locator;
   readonly emailInput: Locator;
   readonly errorMessage: Locator;
   ```

4. **Function Names**: Start with a verb that describes the action
   ```typescript
   async navigateToOverview(): Promise<void> { ... }
   async fillLoginForm(email: string, password: string): Promise<void> { ... }
   async getQuestionCount(): Promise<number> { ... }
   ```

5. **Classes**: Use PascalCase
   ```typescript
   export class AssessmentOverviewPage { ... }
   export class QuestionTableComponent { ... }
   ```

6. **Fixture Names**: Use camelCase and descriptive names
   ```typescript
   // In fixtures.ts
   loginPage: LoginPage;
   assessmentOverviewPage: AssessmentOverviewPage;
   getUniqueCandidateCredentials: { email: string; password: string };
   ```

## Test Naming

Tests should be named to clearly indicate what they're verifying:

```typescript
test('should display error message with invalid credentials', async () => { ... });
test('should navigate to dashboard after successful login', async () => { ... });
```

1. **Named exports**: Use the exact name
   ```typescript
   import { LoginPage } from 'pages/common-components/login/LoginPage';
   ```

2. **Default exports**: Use the same name as the exported class/function
   ```typescript
   import AssessmentPage from 'pages/recruiter/assessment/AssessmentPage';
   ```

3. **Path aliases**: Use the defined aliases in tsconfig.json
   ```typescript
   import { LoginPage } from 'pages/common-components/login/LoginPage';  // using alias
   ```
