---
description: when creating .ts files
globs: 
alwaysApply: false
---
# Playwright Naming Conventions

Consistent naming conventions make our code more readable and maintainable. Follow these conventions for all Playwright tests.

## File Naming

1. **Page Objects**: Use PascalCase and end with "Page"
   - `AssessmentOverviewPage.ts`
   - `LoginPage.ts`

2. **Components**: Use PascalCase and end with "Component"
   - `SettingsComponent.ts`
   - `QuestionTableComponent.ts`

3. **Test Files**: Use kebab-case and end with ".spec.ts"
   - `assessment-overview.spec.ts`
   - `login-functionality.spec.ts`

4. **Fixture Files**: Use `fixtures.ts` (lowercase) for each test group directory
   - `tests/recruiter/assessment/fixtures.ts`
   - `tests/candidate/onboarding/fixtures.ts`

## Variable & Function Naming

1. **Variables**: Use camelCase
   ```typescript
   const userEmail = 'test@example.com';
   ```

2. **Boolean Variables**: Start with "is", "has", "are", or "have"
   ```typescript
   const isLoggedIn = true;
   const hasPermission = false;
   ```

3. **Locators**: Use descriptive names that identify the element's purpose
   ```typescript
   readonly submitButton: Locator;
   readonly emailInput: Locator;
   readonly errorMessage: Locator;
   ```

4. **Function Names**: Start with a verb that describes the action
   ```typescript
   async navigateToOverview(): Promise<void> { ... }
   async fillLoginForm(email: string, password: string): Promise<void> { ... }
   async getQuestionCount(): Promise<number> { ... }
   ```

5. **Classes**: Use PascalCase
   ```typescript
   export class AssessmentOverviewPage { ... }
   export class QuestionTableComponent { ... }
   ```

6. **Fixture Names**: Use camelCase and descriptive names
   ```typescript
   // In fixtures.ts
   loginPage: LoginPage;
   assessmentOverviewPage: AssessmentOverviewPage;
   getUniqueCandidateCredentials: { email: string; password: string };
   ```

## Test Naming

Tests should be named to clearly indicate what they're verifying:

```typescript
test('should display error message with invalid credentials', async () => { ... });
test('should navigate to dashboard after successful login', async () => { ... });
```



1. **Named exports**: Use the exact name
   ```typescript
   import { LoginPage } from 'pages/common-components/login/LoginPage';
   ```

2. **Default exports**: Use the same name as the exported class/function
   ```typescript
   import AssessmentPage from 'pages/recruiter/assessment/AssessmentPage';
   ```

3. **Path aliases**: Use the defined aliases in tsconfig.json
   ```typescript
   import { LoginPage } from 'pages/common-components/login/LoginPage';  // using alias
   ```
